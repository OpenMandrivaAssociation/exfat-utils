From 66e3a255147d1714f313399bfdfb52fff8afbf50 Mon Sep 17 00:00:00 2001
From: relan <relan@users.noreply.github.com>
Date: Sat, 7 Mar 2020 09:13:48 +0300
Subject: Validate UTF-8 byte sequence.

The 2nd and subsequent bytes in a UTF-8 byte sequence must look like
10xxxxxx. The missing checks could lead to crash later.
---
 libexfat/utf.c | 69 +++++++++++++++++++++++++++-----------------------
 1 file changed, 37 insertions(+), 32 deletions(-)

diff --git a/libexfat/utf.c b/libexfat/utf.c
index 230fe4f..96f4608 100644
--- a/libexfat/utf.c
+++ b/libexfat/utf.c
@@ -139,52 +139,57 @@ int exfat_utf16_to_utf8(char* output, const le16_t* input, size_t outsize,
 static const char* utf8_to_wchar(const char* input, wchar_t* wc,
 		size_t insize)
 {
-	if ((input[0] & 0x80) == 0 && insize >= 1)
+	size_t size;
+	size_t i;
+
+	if (insize == 0)
+		exfat_bug("no input for utf8_to_wchar");
+
+	if ((input[0] & 0x80) == 0)
 	{
 		*wc = (wchar_t) input[0];
 		return input + 1;
 	}
-	if ((input[0] & 0xe0) == 0xc0 && insize >= 2)
+	else if ((input[0] & 0xe0) == 0xc0)
 	{
-		*wc = (((wchar_t) input[0] & 0x1f) << 6) |
-		       ((wchar_t) input[1] & 0x3f);
-		return input + 2;
+		*wc = ((wchar_t) input[0] & 0x1f) << 6;
+		size = 2;
 	}
-	if ((input[0] & 0xf0) == 0xe0 && insize >= 3)
+	else if ((input[0] & 0xf0) == 0xe0)
 	{
-		*wc = (((wchar_t) input[0] & 0x0f) << 12) |
-		      (((wchar_t) input[1] & 0x3f) << 6) |
-		       ((wchar_t) input[2] & 0x3f);
-		return input + 3;
+		*wc = ((wchar_t) input[0] & 0x0f) << 12;
+		size = 3;
 	}
-	if ((input[0] & 0xf8) == 0xf0 && insize >= 4)
+	else if ((input[0] & 0xf8) == 0xf0)
 	{
-		*wc = (((wchar_t) input[0] & 0x07) << 18) |
-		      (((wchar_t) input[1] & 0x3f) << 12) |
-		      (((wchar_t) input[2] & 0x3f) << 6) |
-		       ((wchar_t) input[3] & 0x3f);
-		return input + 4;
+		*wc = ((wchar_t) input[0] & 0x07) << 18;
+		size = 4;
 	}
-	if ((input[0] & 0xfc) == 0xf8 && insize >= 5)
+	else if ((input[0] & 0xfc) == 0xf8)
 	{
-		*wc = (((wchar_t) input[0] & 0x03) << 24) |
-		      (((wchar_t) input[1] & 0x3f) << 18) |
-		      (((wchar_t) input[2] & 0x3f) << 12) |
-		      (((wchar_t) input[3] & 0x3f) << 6) |
-		       ((wchar_t) input[4] & 0x3f);
-		return input + 5;
+		*wc = ((wchar_t) input[0] & 0x03) << 24;
+		size = 5;
 	}
-	if ((input[0] & 0xfe) == 0xfc && insize >= 6)
+	else if ((input[0] & 0xfe) == 0xfc)
+	{
+		*wc = ((wchar_t) input[0] & 0x01) << 30;
+		size = 6;
+	}
+	else
+		return NULL;
+
+	if (insize < size)
+		return NULL;
+
+	/* the first byte is handled above */
+	for (i = 1; i < size; i++)
 	{
-		*wc = (((wchar_t) input[0] & 0x01) << 30) |
-		      (((wchar_t) input[1] & 0x3f) << 24) |
-		      (((wchar_t) input[2] & 0x3f) << 18) |
-		      (((wchar_t) input[3] & 0x3f) << 12) |
-		      (((wchar_t) input[4] & 0x3f) << 6) |
-		       ((wchar_t) input[5] & 0x3f);
-		return input + 6;
+		if ((input[i] & 0xc0) != 0x80)
+			return NULL;
+		*wc |= (input[i] & 0x3f) << ((size - i - 1) * 6);
 	}
-	return NULL;
+
+	return input + size;
 }
 
 static le16_t* wchar_to_utf16(le16_t* output, wchar_t wc, size_t outsize)
-- 
2.25.2

